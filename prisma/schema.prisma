generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               String                @id @default(cuid())
  name             String?
  email            String?               @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  characterProfile UserCharacterProfile? @relation("UserToProfile")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TypeQuestion {
  id              Int     @id @default(autoincrement())
  stage           String
  difficulty      String?
  is_bonus        Boolean
  question_text   String
  example_type    String?
  example_content String?
  choices         Json
}

model UserCharacterProfile {
  user_id       String @id
  plan_id       Int
  call_level    Int
  sms_level     Int
  sns_level     Int
  youtube_level Int
  book_level    Int
  saving_level  Int
  type          String
  user          User   @relation("UserToProfile", fields: [user_id], references: [id], onDelete: Cascade)
}

model Plan {
  id                   Int      @id @default(autoincrement())
  name                 String   @unique @db.VarChar(100)
  price                Int
  dataAmountGb         Float    @default(0)
  overageSpeedMbps     Float?   
  voiceMinutes         Int      @default(-1)
  smsIncluded          Boolean  @default(false)
  networkType          NetworkType @default(LTE)
  subscriptionServices Json     @default("[]")
}

enum NetworkType {
  LTE
  FIVE_G @map("5G")
}

enum RecommendRank {
  BEST     @map("으뜸")
  SAVER    @map("알뜰")
  GENEROUS @map("넉넉")
}
