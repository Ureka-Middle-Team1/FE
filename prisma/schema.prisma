generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id  @default(cuid())                      // e.g. 카카오 ID 같은 고유 문자열 ID
  name              String
  email             String  @unique
  image             String
  emailVerified     String?
  age               String?
  tested_count      Int      @default(0)
  badge             Int?
  invited_count     Int      @default(0)
  my_plan           Int?
  recommended_plan  Int?
  created_at        DateTime @default(now())

  characterProfile  UserCharacterProfile?
  chatMessages      ChatMessage[]
  tendencyInfo      UserTendencyInfo?

  badgeRef          Badge?   @relation("UserBadge", fields: [badge], references: [id]) 
  myPlanRef         Plan?    @relation("MyPlan", fields: [my_plan], references: [id])
  recommendedRef    Plan?    @relation("RecommendedPlan", fields: [recommended_plan], references: [id])

  sessions Session[]
  accounts Account[]
}

model Account {
  id                      String   @id @default(cuid())
  userId                  String
  type                    String
  provider                String
  providerAccountId       String
  refresh_token           String?
  access_token            String?
  expires_at              Int?
  token_type              String?
  scope                   String?
  id_token                String?
  session_state           String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id            String   @id @default(cuid())
  sessionToken  String   @unique
  userId        String
  expires       DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TypeQuestion {
  id              Int     @id @default(autoincrement())
  stage           String
  difficulty      String?
  is_bonus        Boolean
  question_text   String
  example_type    String?
  example_content String?
  choices         Json
}

model UserCharacterProfile {
  user_id       String   @id
  plan_id       Int
  call_level    Int
  sms_level     Int
  sns_level     Int
  youtube_level Int
  book_level    Int
  saving_level  Int
  type          String

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  plan Plan @relation(fields: [plan_id], references: [id])
}



model Badge {
  id          Int    @id @default(autoincrement())         // 기본 키
  name        String                                       // 뱃지 이름
  
  users User[] @relation("UserBadge")
}


model Plan {
  id                  Int     @id @default(autoincrement())
  name                String
  price               Int
  discount_price      Int
  data_amount         String
  voice_amount        String
  sms_amount          String
  overage_description String  @default("")
  add_on_description  String
  network_type        String   
  recommend_rank      String   
  tags                Json

  myPlanUsers         User[] @relation("MyPlan")
  recommendedUsers    User[] @relation("RecommendedPlan")

  UserCharacterProfile UserCharacterProfile[]
}

model ChatMessage {
  id         Int      @id @default(autoincrement())
  user_id    String
  content    String
  created_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("ChatMessage")
}

model UserTendencyInfo {
  id         String   @id
  voice      Int
  sms        Int
  age        String
  type       String
  dis        String
  subscribe  String

  user User @relation(fields: [id], references: [id], onDelete: Cascade)

  @@map("UserTendencyInfo")
}